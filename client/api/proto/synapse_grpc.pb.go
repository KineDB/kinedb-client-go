// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: synapse.proto

package proto

import (
	context "context"
	proto "github.com/KineDB/kinedb-client-go/common/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SynapseServiceClient is the client API for SynapseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynapseServiceClient interface {
	Execute(ctx context.Context, in *proto.Statement, opts ...grpc.CallOption) (*proto.Results, error)
	StreamExecute(ctx context.Context, in *proto.Statement, opts ...grpc.CallOption) (SynapseService_StreamExecuteClient, error)
}

type synapseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynapseServiceClient(cc grpc.ClientConnInterface) SynapseServiceClient {
	return &synapseServiceClient{cc}
}

func (c *synapseServiceClient) Execute(ctx context.Context, in *proto.Statement, opts ...grpc.CallOption) (*proto.Results, error) {
	out := new(proto.Results)
	err := c.cc.Invoke(ctx, "/proto.SynapseService/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synapseServiceClient) StreamExecute(ctx context.Context, in *proto.Statement, opts ...grpc.CallOption) (SynapseService_StreamExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &SynapseService_ServiceDesc.Streams[0], "/proto.SynapseService/streamExecute", opts...)
	if err != nil {
		return nil, err
	}
	x := &synapseServiceStreamExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SynapseService_StreamExecuteClient interface {
	Recv() (*proto.Results, error)
	grpc.ClientStream
}

type synapseServiceStreamExecuteClient struct {
	grpc.ClientStream
}

func (x *synapseServiceStreamExecuteClient) Recv() (*proto.Results, error) {
	m := new(proto.Results)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SynapseServiceServer is the server API for SynapseService service.
// All implementations should embed UnimplementedSynapseServiceServer
// for forward compatibility
type SynapseServiceServer interface {
	Execute(context.Context, *proto.Statement) (*proto.Results, error)
	StreamExecute(*proto.Statement, SynapseService_StreamExecuteServer) error
}

// UnimplementedSynapseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSynapseServiceServer struct {
}

func (UnimplementedSynapseServiceServer) Execute(context.Context, *proto.Statement) (*proto.Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSynapseServiceServer) StreamExecute(*proto.Statement, SynapseService_StreamExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExecute not implemented")
}

// UnsafeSynapseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynapseServiceServer will
// result in compilation errors.
type UnsafeSynapseServiceServer interface {
	mustEmbedUnimplementedSynapseServiceServer()
}

func RegisterSynapseServiceServer(s grpc.ServiceRegistrar, srv SynapseServiceServer) {
	s.RegisterService(&SynapseService_ServiceDesc, srv)
}

func _SynapseService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Statement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynapseServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SynapseService/execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynapseServiceServer).Execute(ctx, req.(*proto.Statement))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynapseService_StreamExecute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.Statement)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynapseServiceServer).StreamExecute(m, &synapseServiceStreamExecuteServer{stream})
}

type SynapseService_StreamExecuteServer interface {
	Send(*proto.Results) error
	grpc.ServerStream
}

type synapseServiceStreamExecuteServer struct {
	grpc.ServerStream
}

func (x *synapseServiceStreamExecuteServer) Send(m *proto.Results) error {
	return x.ServerStream.SendMsg(m)
}

// SynapseService_ServiceDesc is the grpc.ServiceDesc for SynapseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynapseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SynapseService",
	HandlerType: (*SynapseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "execute",
			Handler:    _SynapseService_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamExecute",
			Handler:       _SynapseService_StreamExecute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synapse.proto",
}
